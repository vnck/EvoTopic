import random
import numpy as np

class Gene:
  """
  A class used to represent an individual in the population. It contains the hyperparameters for LDA algorithm.

  Attributes
  ----------
  n : int
    the number of topic clusters to be generated by LDA

  a : list
    1D array of length equal to number of topic clusters (n), that expresses our a-priori belief for the each topics’ probability.

  b : list
    1D array of length equal to vocab_size, that expresses our a-priori belief for each word.

  fitness : float
    fitness score of the gene

  vocab_size : int
    the size of the vocabulary of corpus.

  N_MIN : int
    minimum value of n

  N_MAX : int
    maximum value of n

  Methods
  -------
  set_vocab_size(vocab_size)
    static method that sets the value of static variable vocab_size.

  mutate()
    mutates values of n, a, and b.

  set_fitness()
    sets the fitness score of a gene.

  get_fitness()
    returns the fitness score of a gene.

  """

  n = 0
  N_MIN = 0
  N_MAX = 201
  a = []
  b = []
  vocab_size = 0
  fitness = -1

  def __init__(self, n=None, a=None, b=None):
    """
    Parameters
    ----------
    n : int, optional
      the number of topic clusters to be generated by LDA. Default value is a
      randomly generated integer between N_MIN and N_MAX.

    a : list, optional
      1D array of length equal to number of topic clusters (n), that expresses
      our a-priori belief for the each topics’ probability. Default value is a 
      randomly generated 1D array.

    b : list, optional
      1D array of length equal to vocab_size, that expresses our a-priori belief
      for each word. Default value is a randomly generated 1D array.
    """

    if Gene.vocab_size < 1 or not isinstance(Gene.vocab_size,int):
      raise ValueError('vocab_size should be a positive integer. Set vocab_size using set_vocab_size method. The value of vocab_size was: {}'.format(Gene.vocab_size))
      
    if n is None or a is None or b is None:
      self.n = np.random.randint(self.N_MIN,self.N_MAX)
      self.a = np.random.dirichlet(np.ones(self.n), size=1)[0]
      self.b = np.random.dirichlet(np.ones(Gene.vocab_size), size=1)[0]
    else:
      if not isinstance(n, int):
        raise Exception('n should be a positive integer. \
                         The value of n was: {}'.format(n))
      self.n = n
      self.a = a
      self.b = b

  @staticmethod
  def set_vocab_size(vocab_size):
    """Sets the value of vocab_size. Must be set to a positive integer before a Gene instance can be created.

    Parameters
    ----------
    vocab_size : int
      size of vocabulary of corpus.
    """
    Gene.vocab_size = vocab_size

  def mutate(self, mutation_rate):

    if(random.random() < mutation_rate):
      # mutate n
      self.n = self.n + random.randint(-3, 3)

      # mutate a
      genes_a = random.sample(self.a, 2)
      p1 = genes_a[0]
      p2 = genes_a[1]
      self.a[genes_a.index(p1)] = p2
      self.a[genes_a.index(p2)] = p1

      # mutate b
      genes_b = random.sample(self.b, 2)
      w1 = genes_b[0]
      w2 = genes_b[1]
      self.b[genes_b.index(w1)] = w2
      self.b[genes_b.index(w2)] = w1


  def set_fitness(self,f):
    self.fitness = f
